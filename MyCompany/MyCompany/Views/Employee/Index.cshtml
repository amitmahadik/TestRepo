@model IEnumerable<MyCompany.Models.Employee>

@{
    ViewBag.Title = "Employee Home Page";
}


@helper buildLinks(int start, int end, string innerContent)
{
     for (int i = start; i <= end; i++)
     {
         <a class="@(i == ViewBag.CurrentPage ? "current" : "")" href="@Url.Action("Index", "Employee", new { page = i })">@(innerContent ?? i.ToString())</a>  
     }
     
}
@helper pageLinks()
{
    const int maxPages = 11;
     
    if (ViewBag.TotalPages <= maxPages)
    {
        @buildLinks(1, (int)ViewBag.TotalPages, null)
        return;
    }
 
    int pagesAfter = ViewBag.TotalPages - ViewBag.CurrentPage; // Number of pages after current
    int pagesBefore = ViewBag.CurrentPage - 1; // Number of pages before current
 
    if (pagesAfter <= 4)
    {
        @buildLinks(1, 1, null) // Show 1st page
 
        int pageSubset = ViewBag.TotalPages - maxPages - 1 > 1 ? ViewBag.TotalPages - maxPages - 1 : 2;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)
 
        @buildLinks(ViewBag.TotalPages - maxPages + 3, ViewBag.TotalPages, null) // Show last pages
 
        return; // Exit
    }
 
    if (pagesBefore <= 4)
    {
       @buildLinks(1, maxPages - 2, null) // Show 1st pages
 
 
       int pageSubset = maxPages + 2 < ViewBag.TotalPages ? maxPages + 2 : ViewBag.TotalPages - 1;
       @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)
 
       @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page
 
        return; // Exit
 
    }
 
    if (pagesAfter > 4)
    {
        @buildLinks(1, 1, null) // Show 1st pages
 
        int pageSubset1 = ViewBag.CurrentPage - 7 > 1 ? ViewBag.CurrentPage - 7 : 2;
        int pageSubset2 = ViewBag.CurrentPage + 7 < ViewBag.TotalPages ? ViewBag.CurrentPage + 7 : ViewBag.TotalPages - 1;
 
        @buildLinks(pageSubset1, pageSubset1, pageSubset1 == ViewBag.CurrentPage - 4 ? null : "...") // Show 1st page subset (...)
 
        @buildLinks(ViewBag.CurrentPage - 3, ViewBag.CurrentPage + 3, null) // Show middle pages
 
        // Show 2nd page subset (...)
        // only show ... if page is contigous to the previous one.
        @buildLinks(pageSubset2, pageSubset2, pageSubset2 ==  ViewBag.CurrentPage + 4 ? null : "...")
        @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page
 
        return; // Exit
 
    }    
}
<h2>Employee Home</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
@using (Html.BeginForm())
{
   
        <div class="employee-search">
            Find by Employee Name: @Html.TextBox("searchString")  
            <input type="submit" value="Search" />
        </div>
       
}
<table class="employeeCSS">
    <tr>
        <th>
         @*   @Html.DisplayNameFor(model => model.EmployeeName)*@
            @Html.ActionLink("Employee Name", "Index", new { sortOrder = ViewBag.NameSortParm })
        </th>
        <th>
            @Html.ActionLink("Contact Number", "Index", new { sortOrder = ViewBag.ContNoSortParm })
        </th>
        <th>
            @Html.ActionLink("Department", "Index", new { sortOrder = ViewBag.DeptSortParm })
        </th>
        <th></th>
    </tr>

@{int i = 1;}
@foreach (var item in Model) {
    <tr class="@(i++ % 2 == 0 ? "highlighted" : "")">
        <td>
            @Html.DisplayFor(modelItem => item.EmployeeName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ContactNumber)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Department.DepartmentName)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.EmployeeId }) |
            @Html.ActionLink("Details", "Details", new { id=item.EmployeeId }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.EmployeeId })
        </td>
    </tr>
}

</table>
<div class="pagination">
Page: 
@pageLinks()       
</div>